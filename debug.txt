1. コンパイルエラー
    1.1 gccからの出力を確認，該当行を修正
         1.1.a  変数の型，関数のリファレンスに注意する
         1.1.b C言語の場合, ldがなんか言ってきてるとき（ターミナルの出力に色ついてないけど怒られてる時）には, .c → .oの変換は成功してる
                単一.cファイルにはシンタックスエラーがないが， リンクもしくはエントリーポイント(main関数)に不具合がある
2. 意図しない挙動(実行時エラー含む)
    2.1 現状の把握
        2.1.a 標準出力等，outputからコードのどこが実行されているかを正確に把握する
                この時，希望的観測をもたない
    2.2 問題発生箇所の絞り込み
        2.2.a 2.1.aで「ここまでは動いている」という最低保証ができる．ここからさらに絞り込む
                printfを追加するのが早いし，簡単　
        2.2.b 条件分岐(if), ループ(for, while)が想定通りの振る舞いをしているかを確認
                if(判定式)の中に入ったかを調べるために，printf(判定式)
        2.2.c 配列の添字等，メモリ破壊の可能性を検討
                int buf[5]に対して，buf[6]にアクセスしていないか確認
                Address* ad; ad->next;  adがNULLの場合メモリ破壊
                プログラムの挙動が不安定（動作したり，しなかったり）の場合これが怪しい
    2.3 問題の修正
        2.3.a 2.2.b→ ロジックが間違ってる．具体例を挙げて，再度検討
        2.3.b 2.2.c→ メモリ破壊の可能性のある処理の前にはNULLcheck

自分の経験的には，これで大体ちゃんと動くようになる．（malloc壊れた話は，2.2問題発生箇所の特定までは，やったけど修正不可でした．こんなことはまずない）
人間を信用せず，希望的観測をもたない．とにかく，printfしとけば，問題発生箇所は特定できる．ここまでやってから，人に聞くのが理想的
時間の関係で早期に相談するときにも，何を確認したのか事実ベースで報告すると話がスムーズ